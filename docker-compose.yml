version: '3.8'

services:
  # Main application service
  timestamp-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: multiversx-timestamp-service
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - MULTIVERSX_NETWORK=${MULTIVERSX_NETWORK:-devnet}
      - MULTIVERSX_WALLET_MNEMONIC=${MULTIVERSX_WALLET_MNEMONIC}
      - API_KEYS=${API_KEYS}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    volumes:
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - timestamp-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: multiversx-timestamp-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server /usr/local/etc/redis/redis.conf --requirepass "$$REDIS_PASSWORD"
        else
          redis-server /usr/local/etc/redis/redis.conf
        fi
      '
    networks:
      - timestamp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: multiversx-timestamp-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - timestamp-service
    networks:
      - timestamp-network
    profiles:
      - with-nginx
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: multiversx-timestamp-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - timestamp-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: multiversx-timestamp-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - timestamp-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: multiversx-timestamp-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - timestamp-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Log shipping with Promtail (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: multiversx-timestamp-promtail
    restart: unless-stopped
    volumes:
      - ./promtail.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - timestamp-network
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# Named volumes for data persistence
volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-logs:
    driver: local

# Custom network for service communication
networks:
  timestamp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16